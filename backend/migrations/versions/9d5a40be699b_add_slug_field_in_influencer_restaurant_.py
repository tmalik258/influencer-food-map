"""Add slug field in influencer, restaurant, video

Revision ID: 9d5a40be699b
Revises: 2c7e0b4cf31b
Create Date: 2025-10-18 08:07:27.800260

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '9d5a40be699b'
down_revision: Union[str, Sequence[str], None] = '2c7e0b4cf31b'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # 1) Add slug columns as nullable to allow backfill
    op.add_column('influencers', sa.Column('slug', sa.String(length=255), nullable=True))
    op.add_column('restaurants', sa.Column('slug', sa.String(length=255), nullable=True))
    op.add_column('videos', sa.Column('slug', sa.String(length=255), nullable=True))

    # 2) Backfill unique slugs based on existing names/titles
    from slugify import slugify  # python-slugify
    bind = op.get_bind()

    def backfill_unique_slugs(table_name: str, source_col: str) -> None:
        rows = bind.execute(sa.text(f"SELECT id, {source_col} FROM {table_name}")).fetchall()
        used = set()
        for row in rows:
            id_val = row[0]
            src_val = row[1] or ''
            base = slugify(src_val, max_length=255) or 'untitled'
            candidate = base
            i = 2
            while candidate in used:
                suffix = f"-{i}"
                candidate = f"{base[:255 - len(suffix)]}{suffix}"
                i += 1
            used.add(candidate)
            bind.execute(sa.text(f"UPDATE {table_name} SET slug = :slug WHERE id = :id"), {"slug": candidate, "id": id_val})

    backfill_unique_slugs('influencers', 'name')
    backfill_unique_slugs('restaurants', 'name')
    backfill_unique_slugs('videos', 'title')

    # 3) Make slug columns NOT NULL
    op.alter_column('influencers', 'slug', existing_type=sa.String(length=255), nullable=False)
    op.alter_column('restaurants', 'slug', existing_type=sa.String(length=255), nullable=False)
    op.alter_column('videos', 'slug', existing_type=sa.String(length=255), nullable=False)

    # 4) Create unique indexes
    op.create_index(op.f('ix_influencers_slug'), 'influencers', ['slug'], unique=True)
    op.create_index(op.f('ix_restaurants_slug'), 'restaurants', ['slug'], unique=True)
    op.create_index(op.f('ix_videos_slug'), 'videos', ['slug'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_videos_slug'), table_name='videos')
    op.drop_column('videos', 'slug')
    op.drop_index(op.f('ix_restaurants_slug'), table_name='restaurants')
    op.drop_column('restaurants', 'slug')
    op.drop_index(op.f('ix_influencers_slug'), table_name='influencers')
    op.drop_column('influencers', 'slug')
    # ### end Alembic commands ###
