"""removed_started_by_cancelled_by_and_automatic_trigger_option

Revision ID: ccc4a59b32ba
Revises: 463acaa947e0
Create Date: 2025-10-04 12:46:51.556927

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'ccc4a59b32ba'
down_revision: Union[str, Sequence[str], None] = '463acaa947e0'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('idx_influencer_slug_created'), table_name='influencers')
    op.drop_index(op.f('idx_influencers_slug'), table_name='influencers')
    op.drop_constraint(op.f('influencers_slug_key'), 'influencers', type_='unique')
    op.drop_column('influencers', 'slug')
    op.drop_column('jobs', 'logs')
    op.drop_column('jobs', 'cancelled_by')
    op.drop_index(op.f('idx_restaurant_slug_active'), table_name='restaurants')
    op.drop_index(op.f('idx_restaurants_slug'), table_name='restaurants')
    op.drop_constraint(op.f('restaurants_slug_key'), 'restaurants', type_='unique')
    op.drop_column('restaurants', 'slug')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('restaurants', sa.Column('slug', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.create_unique_constraint(op.f('restaurants_slug_key'), 'restaurants', ['slug'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_restaurants_slug'), 'restaurants', ['slug'], unique=False)
    op.create_index(op.f('idx_restaurant_slug_active'), 'restaurants', ['slug', 'is_active'], unique=False)
    op.add_column('jobs', sa.Column('cancelled_by', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('jobs', sa.Column('logs', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('influencers', sa.Column('slug', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.create_unique_constraint(op.f('influencers_slug_key'), 'influencers', ['slug'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_influencers_slug'), 'influencers', ['slug'], unique=False)
    op.create_index(op.f('idx_influencer_slug_created'), 'influencers', ['slug', 'created_at'], unique=False)
    # ### end Alembic commands ###
